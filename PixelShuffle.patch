--- venv/lib/python3.12/site-packages/torch/nn/modules/pixelshuffle.py
+++ venv/lib/python3.12/site-packages/torch/nn/modules/pixelshuffle.py

@@ -1,31 +1,22 @@
 class PixelShuffle(Module):
-    r"""Rearrange elements in a tensor according to an upscaling factor.
-
-    Rearranges elements in a tensor of shape :math:`(*, C \times r^2, H, W)`
-    to a tensor of shape :math:`(*, C, H \times r, W \times r)`, where r is an upscale factor.
+    r"""Rearranges elements in a tensor of shape :math:`(*, C \times r^2, H, W)`
+    to a tensor of shape :math:`(*, C, H \times r, W \times r)`.
 
     This is useful for implementing efficient sub-pixel convolution
     with a stride of :math:`1/r`.
 
-    See the paper:
+    Look at the paper:
     `Real-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional Neural Network`_
-    by Shi et al. (2016) for more details.
+    by Shi et. al (2016) for more details.
 
     Args:
         upscale_factor (int): factor to increase spatial resolution by
 
     Shape:
-        - Input: :math:`(*, C_{in}, H_{in}, W_{in})`, where * is zero or more batch dimensions
-        - Output: :math:`(*, C_{out}, H_{out}, W_{out})`, where
-
-    .. math::
-        C_{out} = C_{in} \div \text{upscale\_factor}^2
-
-    .. math::
-        H_{out} = H_{in} \times \text{upscale\_factor}
-
-    .. math::
-        W_{out} = W_{in} \times \text{upscale\_factor}
+        - Input: :math:`(N, L, H_{in}, W_{in})` where :math:`L=C \times \text{upscale\_factor}^2`
+        - Output: :math:`(N, C, H_{out}, W_{out})` where
+          :math:`H_{out} = H_{in} \times \text{upscale\_factor}`
+          and :math:`W_{out} = W_{in} \times \text{upscale\_factor}`
 
     Examples::
 
@@ -38,17 +29,16 @@
     .. _Real-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional Neural Network:
         https://arxiv.org/abs/1609.05158
     """
+    __constants__ = ['upscale_factor']
 
-    __constants__ = ['upscale_factor']
-    upscale_factor: int
-
-    def __init__(self, upscale_factor: int) -> None:
-        super().__init__()
+    def __init__(self, upscale_factor):
+        super(PixelShuffle, self).__init__()
         self.upscale_factor = upscale_factor
 
-    def forward(self, input: Tensor) -> Tensor:
+    @weak_script_method
+    def forward(self, input):
         return F.pixel_shuffle(input, self.upscale_factor)
 
-    def extra_repr(self) -> str:
-        return f'upscale_factor={self.upscale_factor}'
+    def extra_repr(self):
+        return 'upscale_factor={}'.format(self.upscale_factor)
 