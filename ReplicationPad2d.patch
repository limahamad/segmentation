--- venv/lib/python3.12/site-packages/torch/nn/modules/padding.py
+++ venv/lib/python3.12/site-packages/torch/nn/modules/padding.py
@@ -9,8 +9,8 @@
             :math:`\text{padding\_right}`, :math:`\text{padding\_top}`, :math:`\text{padding\_bottom}`)
 
     Shape:
-        - Input: :math:`(N, C, H_{in}, W_{in})` or :math:`(C, H_{in}, W_{in})`.
-        - Output: :math:`(N, C, H_{out}, W_{out})` or :math:`(C, H_{out}, W_{out})`, where
+        - Input: :math:`(N, C, H_{in}, W_{in})`
+        - Output: :math:`(N, C, H_{out}, W_{out})` where
 
           :math:`H_{out} = H_{in} + \text{padding\_top} + \text{padding\_bottom}`
 
@@ -19,7 +19,6 @@
     Examples::
 
         >>> m = nn.ReplicationPad2d(2)
-        >>> # xdoctest: +IGNORE_WANT("non-deterministic")
         >>> input = torch.arange(9, dtype=torch.float).reshape(1, 1, 3, 3)
         >>> input
         tensor([[[[0., 1., 2.],
@@ -41,11 +40,10 @@
                   [0., 0., 1., 2., 2.],
                   [3., 3., 4., 5., 5.],
                   [6., 6., 7., 8., 8.]]]])
+
     """
 
-    padding: Tuple[int, int, int, int]
-
-    def __init__(self, padding: _size_4_t) -> None:
-        super().__init__()
+    def __init__(self, padding):
+        super(ReplicationPad2d, self).__init__()
         self.padding = _quadruple(padding)
 