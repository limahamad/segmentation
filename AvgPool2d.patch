--- /usr/local/lib/python3.6/dist-packages/torch/nn/modules/pooling.py
+++ /usr/local/lib/python3.6/dist-packages/torch/nn/modules/pooling.py
@@ -1,5 +1,6 @@
 class AvgPool2d(_AvgPoolNd):
-    r"""Applies a 2D average pooling over an input signal composed of several input planes.
+    r"""Applies a 2D average pooling over an input signal composed of several input
+    planes.
 
     In the simplest case, the output value of the layer with input size :math:`(N, C, H, W)`,
     output :math:`(N, C, H_{out}, W_{out})` and :attr:`kernel_size` :math:`(kH, kW)`
@@ -13,10 +14,6 @@
     If :attr:`padding` is non-zero, then the input is implicitly zero-padded on both sides
     for :attr:`padding` number of points.
 
-    Note:
-        When ceil_mode=True, sliding windows are allowed to go off-bounds if they start within the left padding
-        or the input. Sliding windows that would start in the right padded region are ignored.
-
     The parameters :attr:`kernel_size`, :attr:`stride`, :attr:`padding` can either be:
 
         - a single ``int`` -- in which case the same value is used for the height and width dimension
@@ -29,12 +26,10 @@
         padding: implicit zero padding to be added on both sides
         ceil_mode: when True, will use `ceil` instead of `floor` to compute the output shape
         count_include_pad: when True, will include the zero-padding in the averaging calculation
-        divisor_override: if specified, it will be used as divisor, otherwise size of the pooling region will be used.
-
 
     Shape:
-        - Input: :math:`(N, C, H_{in}, W_{in})` or :math:`(C, H_{in}, W_{in})`.
-        - Output: :math:`(N, C, H_{out}, W_{out})` or :math:`(C, H_{out}, W_{out})`, where
+        - Input: :math:`(N, C, H_{in}, W_{in})`
+        - Output: :math:`(N, C, H_{out}, W_{out})`, where
 
           .. math::
               H_{out} = \left\lfloor\frac{H_{in}  + 2 \times \text{padding}[0] -
@@ -43,12 +38,6 @@
           .. math::
               W_{out} = \left\lfloor\frac{W_{in}  + 2 \times \text{padding}[1] -
                 \text{kernel\_size}[1]}{\text{stride}[1]} + 1\right\rfloor
-
-          Per the note above, if ``ceil_mode`` is True and :math:`(H_{out} - 1)\times \text{stride}[0]\geq H_{in}
-          + \text{padding}[0]`, we skip the last window as it would start in the bottom padded region,
-          resulting in :math:`H_{out}` being reduced by one.
-
-          The same applies for :math:`W_{out}`.
 
     Examples::
 
@@ -59,26 +48,17 @@
         >>> input = torch.randn(20, 16, 50, 32)
         >>> output = m(input)
     """
-
-    __constants__ = ['kernel_size', 'stride', 'padding', 'ceil_mode', 'count_include_pad', 'divisor_override']
-
-    kernel_size: _size_2_t
-    stride: _size_2_t
-    padding: _size_2_t
-    ceil_mode: bool
-    count_include_pad: bool
-
-    def __init__(self, kernel_size: _size_2_t, stride: Optional[_size_2_t] = None, padding: _size_2_t = 0,
-                 ceil_mode: bool = False, count_include_pad: bool = True, divisor_override: Optional[int] = None) -> None:
-        super().__init__()
+    def __init__(self, kernel_size, stride=None, padding=0, ceil_mode=False,
+                 count_include_pad=True):
+        super(AvgPool2d, self).__init__()
         self.kernel_size = kernel_size
-        self.stride = stride if (stride is not None) else kernel_size
+        self.stride = stride or kernel_size
         self.padding = padding
         self.ceil_mode = ceil_mode
         self.count_include_pad = count_include_pad
-        self.divisor_override = divisor_override
 
-    def forward(self, input: Tensor) -> Tensor:
+    @weak_script_method
+    def forward(self, input):
         return F.avg_pool2d(input, self.kernel_size, self.stride,
-                            self.padding, self.ceil_mode, self.count_include_pad, self.divisor_override)
+                            self.padding, self.ceil_mode, self.count_include_pad)
 